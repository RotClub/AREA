// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  API_USER
  ADMIN
}

enum Provider {
  GOOGLE
  DISCORD
  STEAM
}

model User {
  id             Int      @id @unique @default(autoincrement())
  email          String   @unique
  role           UserRole @default(USER)
  token          String   @unique
  hashedPassword String
  createdAt      DateTime @default(now())
  authMethods    Oauth[]
}

model Oauth {
  id             Int           @id @unique @default(autoincrement())
  providerType   Provider?
  providerInfo   ProviderInfo? @relation(fields: [providerInfoId], references: [id])
  providerInfoId Int?
  user           User?         @relation(fields: [userId], references: [id])
  userId         Int?
}

model ProviderInfo {
  id             Int      @id @unique @default(autoincrement())
  userId         String   @unique
  userEmail      String
  accessToken    String   @unique
  refreshToken   String?  @unique
  tokenExpiresAt DateTime @default(now())
  oauth          Oauth[]
}

model Program {
  id      Int      @id @unique @default(autoincrement())
  name    String
  actions Action[]
}

model Action {
  id        Int        @id @unique @default(autoincrement())
  program   Program?   @relation(fields: [programId], references: [id])
  programId Int?
  reactions Reaction[]
  metadata  Json?
}

model Reaction {
  id       Int     @id @unique @default(autoincrement())
  action   Action? @relation(fields: [actionId], references: [id])
  actionId Int?
  metadata Json?
}
